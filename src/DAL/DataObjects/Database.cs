// This file was automatically generated by the NPoco T4 Template
// Do not make changes dNewstly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `FountainConPoco`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.\SQLEXPRESS; User ID=sa; password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `True`

using System;
using System.Collections.Generic;
using System.Linq;
using NPoco;

namespace FountainContext.Data.Models
{
	public partial class FountainDb : Database
	{
		public FountainDb() : base("FountainConPoco")
		{
			CommonConstruct();
		}

		public FountainDb(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		public virtual void CommonConstruct()
		{
		    Factory = new DefaultFactory();
		}
		
		public interface IFactory
		{
			FountainDb GetInstance();
		    void BeginTransaction(FountainDb database);
		    void CompleteTransaction(FountainDb database);
		}

        public class DefaultFactory : IFactory
        {
            [ThreadStatic]
            static Stack<FountainDb> _stack = new Stack<FountainDb>();

            public FountainDb GetInstance()
            {
               
			    if (_stack == null)
                { return new  FountainDb(); }
                else { 
					return _stack.Count > 0 ? _stack.Peek() : new FountainDb();
                }
			   
			    
            }

            public void BeginTransaction(FountainDb database)
            {

			 if (_stack == null)
				 {
				  _stack = new  Stack<FountainDb>();
				 }
                _stack.Push(database);
            }

            public void CompleteTransaction(FountainDb database)
            {
			 if (_stack == null)
				 {
				  _stack = new Stack <FountainDb>();
				 }
                _stack.Pop();
            }
        }
		
		public static IFactory Factory { get; set; }

        public static FountainDb GetInstance()
        {
		 if (Factory == null)
                return new FountainDb();
			return Factory.GetInstance();
        }

		protected override void OnBeginTransaction()
		{
            Factory.BeginTransaction(this);
		}

        protected override void OnCompleteTransaction()
		{
            Factory.CompleteTransaction(this);
		}
		public class Record<T> where T:new()
		{
			public bool IsNew(Database db) { return db.IsNew(this); }
			public object Insert(Database db) { return db.Insert(this); }  
			
			public int Update(Database db, IEnumerable<string> columns) { return db.Update(this, columns); }
			public static int Update(Database db, string sql, params object[] args) { return db.Update<T>(sql, args); }
			public static int Update(Database db, Sql sql) { return db.Update<T>(sql); }
			public int Delete(Database db) { return db.Delete(this); }
			public static int Delete(Database db, string sql, params object[] args) { return db.Delete<T>(sql, args); }
			public static int Delete(Database db, Sql sql) { return db.Delete<T>(sql); }
			public static int Delete(Database db, object primaryKey) { return db.Delete<T>(primaryKey); }
			public static bool Exists(Database db, object primaryKey) { return db.Exists<T>(primaryKey); }
			public static T SingleOrDefault(Database db, string sql, params object[] args) { return db.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Database db, Sql sql) { return db.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(Database db, string sql, params object[] args) { return db.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Database db, Sql sql) { return db.FirstOrDefault<T>(sql); }
			public static T Single(Database db, string sql, params object[] args) { return db.Single<T>(sql, args); }
			public static T Single(Database db, Sql sql) { return db.Single<T>(sql); }
			public static T First(Database db, string sql, params object[] args) { return db.First<T>(sql, args); }
			public static T First(Database db, Sql sql) { return db.First<T>(sql); }
			public static List<T> Fetch(Database db, string sql, params object[] args) { return db.Fetch<T>(sql, args); }
			public static List<T> Fetch(Database db, Sql sql) { return db.Fetch<T>(sql); }
			public static List<T> Fetch(Database db, long page, long itemsPerPage, string sql, params object[] args) { return db.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(Database db, long page, long itemsPerPage, Sql sql) { return db.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(Database db, long skip, long take, string sql, params object[] args) { return db.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(Database db, long skip, long take, Sql sql) { return db.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(Database db, long page, long itemsPerPage, string sql, params object[] args) { return db.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(Database db, long page, long itemsPerPage, Sql sql) { return db.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(Database db, string sql, params object[] args) { return db.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Database db, Sql sql) { return db.Query<T>(sql); }			
			
			protected HashSet<string> Tracker = new HashSet<string>();
			private void OnLoaded() { Tracker.Clear(); }
			protected void Track(string c) { if (!Tracker.Contains(c)) Tracker.Add(c); }

			public int Update(Database db) 
			{ 
				if (Tracker.Count == 0)
					return db.Update(this); 

				var retv = db.Update(this, Tracker.ToArray());
				Tracker.Clear();
				return retv;
			}
			public void Save(Database db) 
			{
                if (this.IsNew(db))
					Insert(db);
				else
					Update(db);
			}		
		}	
	}		
		[TableName("dbo.Pure_Tracking")]
		[PrimaryKey("Tid")]
		[ExplicitColumns]
		public partial class PureTracking : FountainDb.Record<PureTracking>  
		{
	        [Column] public int Tid 
			{ 
				get { return _Tid; }
				set { _Tid = value; Track("Tid"); }
			}
			int _Tid;
			[Column("UserName")] public string Username 
			{ 
				get { return _Username; }
				set { _Username = value; Track("UserName"); }
			}
			string _Username;
			[Column("SessionId")] public string Sessionid 
			{ 
				get { return _Sessionid; }
				set { _Sessionid = value; Track("SessionId"); }
			}
			string _Sessionid;
			[Column("SystemIp")] public string Systemip 
			{ 
				get { return _Systemip; }
				set { _Systemip = value; Track("SystemIp"); }
			}
			string _Systemip;
			[Column("SystemName")] public string Systemname 
			{ 
				get { return _Systemname; }
				set { _Systemname = value; Track("SystemName"); }
			}
			string _Systemname;
		
			public static IEnumerable<PureTracking> Query(Database db, string[] columns = null, int[] Tid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Tracking (NOLOCK)");

				if (Tid != null)
					sql.Where("Tid IN (@0)", Tid);

                return db.Query<PureTracking>(sql);
            }
		}
		
		[TableName("dbo.Pure_Bank")]
		[PrimaryKey("BankId")]
		[ExplicitColumns]
		public partial class PureBank : FountainDb.Record<PureBank>  
		{
			[Column("BankId")] public int Bankid 
			{ 
				get { return _Bankid; }
				set { _Bankid = value; Track("BankId"); }
			}
			int _Bankid;
			[Column("BankName")] public string Bankname 
			{ 
				get { return _Bankname; }
				set { _Bankname = value; Track("BankName"); }
			}
			string _Bankname;
			[Column("BankStatus")] public bool? Bankstatus 
			{ 
				get { return _Bankstatus; }
				set { _Bankstatus = value; Track("BankStatus"); }
			}
			bool? _Bankstatus;
		
			public static IEnumerable<PureBank> Query(Database db, string[] columns = null, int[] Bankid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Bank (NOLOCK)");

				if (Bankid != null)
					sql.Where("BankId IN (@0)", Bankid);

                return db.Query<PureBank>(sql);
            }
		}
		
		[TableName("dbo.Pure_Role")]
		[PrimaryKey("RoleId")]
		[ExplicitColumns]
		public partial class PureRole : FountainDb.Record<PureRole>  
		{
			[Column("RoleId")] public int Roleid 
			{ 
				get { return _Roleid; }
				set { _Roleid = value; Track("RoleId"); }
			}
			int _Roleid;
			[Column("RoleName")] public string Rolename 
			{ 
				get { return _Rolename; }
				set { _Rolename = value; Track("RoleName"); }
			}
			string _Rolename;
			[Column("RoleDesc")] public string Roledesc 
			{ 
				get { return _Roledesc; }
				set { _Roledesc = value; Track("RoleDesc"); }
			}
			string _Roledesc;
			[Column("RoleStatus")] public bool? Rolestatus 
			{ 
				get { return _Rolestatus; }
				set { _Rolestatus = value; Track("RoleStatus"); }
			}
			bool? _Rolestatus;
		
			public static IEnumerable<PureRole> Query(Database db, string[] columns = null, int[] Roleid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Role (NOLOCK)");

				if (Roleid != null)
					sql.Where("RoleId IN (@0)", Roleid);

                return db.Query<PureRole>(sql);
            }
		}
		
		[TableName("dbo.Pure_Country")]
		[PrimaryKey("CountryId")]
		[ExplicitColumns]
		public partial class PureCountry : FountainDb.Record<PureCountry>  
		{
			[Column("CountryId")] public int Countryid 
			{ 
				get { return _Countryid; }
				set { _Countryid = value; Track("CountryId"); }
			}
			int _Countryid;
			[Column("CountryName")] public string Countryname 
			{ 
				get { return _Countryname; }
				set { _Countryname = value; Track("CountryName"); }
			}
			string _Countryname;
			[Column("CountryCode")] public string Countrycode 
			{ 
				get { return _Countrycode; }
				set { _Countrycode = value; Track("CountryCode"); }
			}
			string _Countrycode;
		
			public static IEnumerable<PureCountry> Query(Database db, string[] columns = null, int[] Countryid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Country (NOLOCK)");

				if (Countryid != null)
					sql.Where("CountryId IN (@0)", Countryid);

                return db.Query<PureCountry>(sql);
            }
		}
		
		[TableName("dbo.Pure_RoleMenu")]
		[PrimaryKey("Id")]
		[ExplicitColumns]
		public partial class PureRoleMenu : FountainDb.Record<PureRoleMenu>  
		{
	        [Column] public int Id 
			{ 
				get { return _Id; }
				set { _Id = value; Track("Id"); }
			}
			int _Id;
			[Column("MenuId")] public int? Menuid 
			{ 
				get { return _Menuid; }
				set { _Menuid = value; Track("MenuId"); }
			}
			int? _Menuid;
			[Column("RoleId")] public int? Roleid 
			{ 
				get { return _Roleid; }
				set { _Roleid = value; Track("RoleId"); }
			}
			int? _Roleid;
			[Column("MenuDesc")] public string Menudesc 
			{ 
				get { return _Menudesc; }
				set { _Menudesc = value; Track("MenuDesc"); }
			}
			string _Menudesc;
		
			public static IEnumerable<PureRoleMenu> Query(Database db, string[] columns = null, int[] Id = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_RoleMenu (NOLOCK)");

				if (Id != null)
					sql.Where("Id IN (@0)", Id);

                return db.Query<PureRoleMenu>(sql);
            }
		}
		
		[TableName("dbo.Pure_Customer_Info")]
		[PrimaryKey("CustomerId")]
		[ExplicitColumns]
		public partial class PureCustomerInfo : FountainDb.Record<PureCustomerInfo>  
		{
			[Column("CustomerId")] public int Customerid 
			{ 
				get { return _Customerid; }
				set { _Customerid = value; Track("CustomerId"); }
			}
			int _Customerid;
			[Column("NameTitle")] public string Nametitle 
			{ 
				get { return _Nametitle; }
				set { _Nametitle = value; Track("NameTitle"); }
			}
			string _Nametitle;
			[Column("FirstName")] public string Firstname 
			{ 
				get { return _Firstname; }
				set { _Firstname = value; Track("FirstName"); }
			}
			string _Firstname;
			[Column("MiddleName")] public string Middlename 
			{ 
				get { return _Middlename; }
				set { _Middlename = value; Track("MiddleName"); }
			}
			string _Middlename;
			[Column("LastName")] public string Lastname 
			{ 
				get { return _Lastname; }
				set { _Lastname = value; Track("LastName"); }
			}
			string _Lastname;
			[Column("UserEmail")] public string Useremail 
			{ 
				get { return _Useremail; }
				set { _Useremail = value; Track("UserEmail"); }
			}
			string _Useremail;
			[Column("PhoneNos1")] public string Phonenos1 
			{ 
				get { return _Phonenos1; }
				set { _Phonenos1 = value; Track("PhoneNos1"); }
			}
			string _Phonenos1;
			[Column("PhoneNos2")] public string Phonenos2 
			{ 
				get { return _Phonenos2; }
				set { _Phonenos2 = value; Track("PhoneNos2"); }
			}
			string _Phonenos2;
			[Column("AccountImg")] public string Accountimg 
			{ 
				get { return _Accountimg; }
				set { _Accountimg = value; Track("AccountImg"); }
			}
			string _Accountimg;
			[Column("HomeAddress")] public string Homeaddress 
			{ 
				get { return _Homeaddress; }
				set { _Homeaddress = value; Track("HomeAddress"); }
			}
			string _Homeaddress;
			[Column("LGA")] public string Lga 
			{ 
				get { return _Lga; }
				set { _Lga = value; Track("LGA"); }
			}
			string _Lga;
			[Column("SOO")] public string Soo 
			{ 
				get { return _Soo; }
				set { _Soo = value; Track("SOO"); }
			}
			string _Soo;
			[Column("DOB")] public DateTime? Dob 
			{ 
				get { return _Dob; }
				set { _Dob = value; Track("DOB"); }
			}
			DateTime? _Dob;
	        [Column] public string Occupation 
			{ 
				get { return _Occupation; }
				set { _Occupation = value; Track("Occupation"); }
			}
			string _Occupation;
			[Column("EmployerName")] public string Employername 
			{ 
				get { return _Employername; }
				set { _Employername = value; Track("EmployerName"); }
			}
			string _Employername;
			[Column("EmployerPhoneNos")] public string Employerphonenos 
			{ 
				get { return _Employerphonenos; }
				set { _Employerphonenos = value; Track("EmployerPhoneNos"); }
			}
			string _Employerphonenos;
			[Column("EmployerContact")] public string Employercontact 
			{ 
				get { return _Employercontact; }
				set { _Employercontact = value; Track("EmployerContact"); }
			}
			string _Employercontact;
	        [Column] public string Nationality 
			{ 
				get { return _Nationality; }
				set { _Nationality = value; Track("Nationality"); }
			}
			string _Nationality;
			[Column("IDNos")] public int? Idnos 
			{ 
				get { return _Idnos; }
				set { _Idnos = value; Track("IDNos"); }
			}
			int? _Idnos;
			[Column("IDIssueDate")] public DateTime? Idissuedate 
			{ 
				get { return _Idissuedate; }
				set { _Idissuedate = value; Track("IDIssueDate"); }
			}
			DateTime? _Idissuedate;
			[Column("IDExpiryDate")] public DateTime? Idexpirydate 
			{ 
				get { return _Idexpirydate; }
				set { _Idexpirydate = value; Track("IDExpiryDate"); }
			}
			DateTime? _Idexpirydate;
			[Column("UserBVN")] public string Userbvn 
			{ 
				get { return _Userbvn; }
				set { _Userbvn = value; Track("UserBVN"); }
			}
			string _Userbvn;
			[Column("AccountId")] public int? Accountid 
			{ 
				get { return _Accountid; }
				set { _Accountid = value; Track("AccountId"); }
			}
			int? _Accountid;
			[Column("AccountNos")] public string Accountnos 
			{ 
				get { return _Accountnos; }
				set { _Accountnos = value; Track("AccountNos"); }
			}
			string _Accountnos;
			[Column("OtherBankId1")] public string Otherbankid1 
			{ 
				get { return _Otherbankid1; }
				set { _Otherbankid1 = value; Track("OtherBankId1"); }
			}
			string _Otherbankid1;
			[Column("OtherAccountNos1")] public string Otheraccountnos1 
			{ 
				get { return _Otheraccountnos1; }
				set { _Otheraccountnos1 = value; Track("OtherAccountNos1"); }
			}
			string _Otheraccountnos1;
			[Column("OtherBankId2")] public string Otherbankid2 
			{ 
				get { return _Otherbankid2; }
				set { _Otherbankid2 = value; Track("OtherBankId2"); }
			}
			string _Otherbankid2;
			[Column("OtherAccountNos2")] public string Otheraccountnos2 
			{ 
				get { return _Otheraccountnos2; }
				set { _Otheraccountnos2 = value; Track("OtherAccountNos2"); }
			}
			string _Otheraccountnos2;
			[Column("StreetName")] public string Streetname 
			{ 
				get { return _Streetname; }
				set { _Streetname = value; Track("StreetName"); }
			}
			string _Streetname;
			[Column("StreetCity")] public string Streetcity 
			{ 
				get { return _Streetcity; }
				set { _Streetcity = value; Track("StreetCity"); }
			}
			string _Streetcity;
			[Column("StreetState")] public string Streetstate 
			{ 
				get { return _Streetstate; }
				set { _Streetstate = value; Track("StreetState"); }
			}
			string _Streetstate;
			[Column("StreetCountry")] public string Streetcountry 
			{ 
				get { return _Streetcountry; }
				set { _Streetcountry = value; Track("StreetCountry"); }
			}
			string _Streetcountry;
	        [Column] public string Signature 
			{ 
				get { return _Signature; }
				set { _Signature = value; Track("Signature"); }
			}
			string _Signature;
			[Column("UserName")] public string Username 
			{ 
				get { return _Username; }
				set { _Username = value; Track("UserName"); }
			}
			string _Username;
			[Column("RefFName")] public string Reffname 
			{ 
				get { return _Reffname; }
				set { _Reffname = value; Track("RefFName"); }
			}
			string _Reffname;
			[Column("RefMName")] public string Refmname 
			{ 
				get { return _Refmname; }
				set { _Refmname = value; Track("RefMName"); }
			}
			string _Refmname;
			[Column("RefLName")] public string Reflname 
			{ 
				get { return _Reflname; }
				set { _Reflname = value; Track("RefLName"); }
			}
			string _Reflname;
			[Column("RefOccupation")] public string Refoccupation 
			{ 
				get { return _Refoccupation; }
				set { _Refoccupation = value; Track("RefOccupation"); }
			}
			string _Refoccupation;
			[Column("RefPhoneNos")] public string Refphonenos 
			{ 
				get { return _Refphonenos; }
				set { _Refphonenos = value; Track("RefPhoneNos"); }
			}
			string _Refphonenos;
			[Column("RefStreetName")] public string Refstreetname 
			{ 
				get { return _Refstreetname; }
				set { _Refstreetname = value; Track("RefStreetName"); }
			}
			string _Refstreetname;
			[Column("RefStreetCity")] public string Refstreetcity 
			{ 
				get { return _Refstreetcity; }
				set { _Refstreetcity = value; Track("RefStreetCity"); }
			}
			string _Refstreetcity;
			[Column("RefStreetState")] public string Refstreetstate 
			{ 
				get { return _Refstreetstate; }
				set { _Refstreetstate = value; Track("RefStreetState"); }
			}
			string _Refstreetstate;
			[Column("RefStreetCountry")] public string Refstreetcountry 
			{ 
				get { return _Refstreetcountry; }
				set { _Refstreetcountry = value; Track("RefStreetCountry"); }
			}
			string _Refstreetcountry;
			[Column("ReasonForAccount")] public string Reasonforaccount 
			{ 
				get { return _Reasonforaccount; }
				set { _Reasonforaccount = value; Track("ReasonForAccount"); }
			}
			string _Reasonforaccount;
			[Column("AccountStatus")] public bool? Accountstatus 
			{ 
				get { return _Accountstatus; }
				set { _Accountstatus = value; Track("AccountStatus"); }
			}
			bool? _Accountstatus;
			[Column("CreatedBy")] public string Createdby 
			{ 
				get { return _Createdby; }
				set { _Createdby = value; Track("CreatedBy"); }
			}
			string _Createdby;
			[Column("CreatedOn")] public DateTime? Createdon 
			{ 
				get { return _Createdon; }
				set { _Createdon = value; Track("CreatedOn"); }
			}
			DateTime? _Createdon;
			[Column("ModifiedBy")] public string Modifiedby 
			{ 
				get { return _Modifiedby; }
				set { _Modifiedby = value; Track("ModifiedBy"); }
			}
			string _Modifiedby;
			[Column("ModifiedOn")] public DateTime? Modifiedon 
			{ 
				get { return _Modifiedon; }
				set { _Modifiedon = value; Track("ModifiedOn"); }
			}
			DateTime? _Modifiedon;
		
			public static IEnumerable<PureCustomerInfo> Query(Database db, string[] columns = null, int[] Customerid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Customer_Info (NOLOCK)");

				if (Customerid != null)
					sql.Where("CustomerId IN (@0)", Customerid);

                return db.Query<PureCustomerInfo>(sql);
            }
		}
		
		[TableName("dbo.Pure_States")]
		[PrimaryKey("StateId")]
		[ExplicitColumns]
		public partial class PureState : FountainDb.Record<PureState>  
		{
			[Column("StateId")] public int Stateid 
			{ 
				get { return _Stateid; }
				set { _Stateid = value; Track("StateId"); }
			}
			int _Stateid;
			[Column("StateName")] public string Statename 
			{ 
				get { return _Statename; }
				set { _Statename = value; Track("StateName"); }
			}
			string _Statename;
			[Column("CountryCode")] public string Countrycode 
			{ 
				get { return _Countrycode; }
				set { _Countrycode = value; Track("CountryCode"); }
			}
			string _Countrycode;
		
			public static IEnumerable<PureState> Query(Database db, string[] columns = null, int[] Stateid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_States (NOLOCK)");

				if (Stateid != null)
					sql.Where("StateId IN (@0)", Stateid);

                return db.Query<PureState>(sql);
            }
		}
		
		[TableName("dbo.Pure_IDCard")]
		[PrimaryKey("IDNos")]
		[ExplicitColumns]
		public partial class PureIdCard : FountainDb.Record<PureIdCard>  
		{
			[Column("IDNos")] public int Idnos 
			{ 
				get { return _Idnos; }
				set { _Idnos = value; Track("IDNos"); }
			}
			int _Idnos;
			[Column("IDName")] public string Idname 
			{ 
				get { return _Idname; }
				set { _Idname = value; Track("IDName"); }
			}
			string _Idname;
		
			public static IEnumerable<PureIdCard> Query(Database db, string[] columns = null, int[] Idnos = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_IDCard (NOLOCK)");

				if (Idnos != null)
					sql.Where("IDNos IN (@0)", Idnos);

                return db.Query<PureIdCard>(sql);
            }
		}
		
		[TableName("dbo.Pure_TillAccount")]
		[PrimaryKey("TillId")]
		[ExplicitColumns]
		public partial class PureTillAccount : FountainDb.Record<PureTillAccount>  
		{
			[Column("TillId")] public int Tillid 
			{ 
				get { return _Tillid; }
				set { _Tillid = value; Track("TillId"); }
			}
			int _Tillid;
			[Column("AccountName")] public string Accountname 
			{ 
				get { return _Accountname; }
				set { _Accountname = value; Track("AccountName"); }
			}
			string _Accountname;
			[Column("AccountNos")] public string Accountnos 
			{ 
				get { return _Accountnos; }
				set { _Accountnos = value; Track("AccountNos"); }
			}
			string _Accountnos;
			[Column("AccountBal")] public decimal? Accountbal 
			{ 
				get { return _Accountbal; }
				set { _Accountbal = value; Track("AccountBal"); }
			}
			decimal? _Accountbal;
			[Column("CurrencyCode")] public string Currencycode 
			{ 
				get { return _Currencycode; }
				set { _Currencycode = value; Track("CurrencyCode"); }
			}
			string _Currencycode;
			[Column("AccountType")] public string Accounttype 
			{ 
				get { return _Accounttype; }
				set { _Accounttype = value; Track("AccountType"); }
			}
			string _Accounttype;
		
			public static IEnumerable<PureTillAccount> Query(Database db, string[] columns = null, int[] Tillid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_TillAccount (NOLOCK)");

				if (Tillid != null)
					sql.Where("TillId IN (@0)", Tillid);

                return db.Query<PureTillAccount>(sql);
            }
		}
		
		[TableName("dbo.Pure_Loan")]
		[PrimaryKey("LoanId")]
		[ExplicitColumns]
		public partial class PureLoan : FountainDb.Record<PureLoan>  
		{
			[Column("LoanId")] public int Loanid 
			{ 
				get { return _Loanid; }
				set { _Loanid = value; Track("LoanId"); }
			}
			int _Loanid;
			[Column("LoanCateId")] public int? Loancateid 
			{ 
				get { return _Loancateid; }
				set { _Loancateid = value; Track("LoanCateId"); }
			}
			int? _Loancateid;
			[Column("LoanAmount")] public decimal? Loanamount 
			{ 
				get { return _Loanamount; }
				set { _Loanamount = value; Track("LoanAmount"); }
			}
			decimal? _Loanamount;
			[Column("LoanInterest")] public decimal? Loaninterest 
			{ 
				get { return _Loaninterest; }
				set { _Loaninterest = value; Track("LoanInterest"); }
			}
			decimal? _Loaninterest;
			[Column("LoanDuration")] public string Loanduration 
			{ 
				get { return _Loanduration; }
				set { _Loanduration = value; Track("LoanDuration"); }
			}
			string _Loanduration;
			[Column("Guarantor1FName")] public string Guarantor1fname 
			{ 
				get { return _Guarantor1fname; }
				set { _Guarantor1fname = value; Track("Guarantor1FName"); }
			}
			string _Guarantor1fname;
			[Column("Guarantor1MName")] public string Guarantor1mname 
			{ 
				get { return _Guarantor1mname; }
				set { _Guarantor1mname = value; Track("Guarantor1MName"); }
			}
			string _Guarantor1mname;
			[Column("Guarantor1LName")] public string Guarantor1lname 
			{ 
				get { return _Guarantor1lname; }
				set { _Guarantor1lname = value; Track("Guarantor1LName"); }
			}
			string _Guarantor1lname;
			[Column("Guarantor1PhoneNos")] public string Guarantor1phonenos 
			{ 
				get { return _Guarantor1phonenos; }
				set { _Guarantor1phonenos = value; Track("Guarantor1PhoneNos"); }
			}
			string _Guarantor1phonenos;
			[Column("Guarantor1Occupation")] public string Guarantor1occupation 
			{ 
				get { return _Guarantor1occupation; }
				set { _Guarantor1occupation = value; Track("Guarantor1Occupation"); }
			}
			string _Guarantor1occupation;
			[Column("GuarantorIdNos")] public int? Guarantoridnos 
			{ 
				get { return _Guarantoridnos; }
				set { _Guarantoridnos = value; Track("GuarantorIdNos"); }
			}
			int? _Guarantoridnos;
			[Column("Guarantor2FName")] public string Guarantor2fname 
			{ 
				get { return _Guarantor2fname; }
				set { _Guarantor2fname = value; Track("Guarantor2FName"); }
			}
			string _Guarantor2fname;
			[Column("Guarantor2MName")] public string Guarantor2mname 
			{ 
				get { return _Guarantor2mname; }
				set { _Guarantor2mname = value; Track("Guarantor2MName"); }
			}
			string _Guarantor2mname;
			[Column("Guarantor2LName")] public string Guarantor2lname 
			{ 
				get { return _Guarantor2lname; }
				set { _Guarantor2lname = value; Track("Guarantor2LName"); }
			}
			string _Guarantor2lname;
			[Column("Guarantor2PhoneNos")] public string Guarantor2phonenos 
			{ 
				get { return _Guarantor2phonenos; }
				set { _Guarantor2phonenos = value; Track("Guarantor2PhoneNos"); }
			}
			string _Guarantor2phonenos;
			[Column("Guarantor2Occupation")] public string Guarantor2occupation 
			{ 
				get { return _Guarantor2occupation; }
				set { _Guarantor2occupation = value; Track("Guarantor2Occupation"); }
			}
			string _Guarantor2occupation;
			[Column("Guarantor2IdNos")] public int? Guarantor2idnos 
			{ 
				get { return _Guarantor2idnos; }
				set { _Guarantor2idnos = value; Track("Guarantor2IdNos"); }
			}
			int? _Guarantor2idnos;
			[Column("ChequeNos")] public string Chequenos 
			{ 
				get { return _Chequenos; }
				set { _Chequenos = value; Track("ChequeNos"); }
			}
			string _Chequenos;
			[Column("RLoan")] public string Rloan 
			{ 
				get { return _Rloan; }
				set { _Rloan = value; Track("RLoan"); }
			}
			string _Rloan;
			[Column("LoanStatus")] public bool? Loanstatus 
			{ 
				get { return _Loanstatus; }
				set { _Loanstatus = value; Track("LoanStatus"); }
			}
			bool? _Loanstatus;
		
			public static IEnumerable<PureLoan> Query(Database db, string[] columns = null, int[] Loanid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Loan (NOLOCK)");

				if (Loanid != null)
					sql.Where("LoanId IN (@0)", Loanid);

                return db.Query<PureLoan>(sql);
            }
		}
		
		[TableName("dbo.Pure_Loan_Category")]
		[PrimaryKey("LoanCateId")]
		[ExplicitColumns]
		public partial class PureLoanCategory : FountainDb.Record<PureLoanCategory>  
		{
			[Column("LoanCateId")] public int Loancateid 
			{ 
				get { return _Loancateid; }
				set { _Loancateid = value; Track("LoanCateId"); }
			}
			int _Loancateid;
			[Column("LoanName")] public string Loanname 
			{ 
				get { return _Loanname; }
				set { _Loanname = value; Track("LoanName"); }
			}
			string _Loanname;
			[Column("LoanDesc")] public string Loandesc 
			{ 
				get { return _Loandesc; }
				set { _Loandesc = value; Track("LoanDesc"); }
			}
			string _Loandesc;
			[Column("LoanStatus")] public bool? Loanstatus 
			{ 
				get { return _Loanstatus; }
				set { _Loanstatus = value; Track("LoanStatus"); }
			}
			bool? _Loanstatus;
		
			public static IEnumerable<PureLoanCategory> Query(Database db, string[] columns = null, int[] Loancateid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Loan_Category (NOLOCK)");

				if (Loancateid != null)
					sql.Where("LoanCateId IN (@0)", Loancateid);

                return db.Query<PureLoanCategory>(sql);
            }
		}
		
		[TableName("dbo.Pure_Currency")]
		[PrimaryKey("CurrencyId")]
		[ExplicitColumns]
		public partial class PureCurrency : FountainDb.Record<PureCurrency>  
		{
			[Column("CurrencyId")] public int Currencyid 
			{ 
				get { return _Currencyid; }
				set { _Currencyid = value; Track("CurrencyId"); }
			}
			int _Currencyid;
			[Column("CurrencyName")] public string Currencyname 
			{ 
				get { return _Currencyname; }
				set { _Currencyname = value; Track("CurrencyName"); }
			}
			string _Currencyname;
			[Column("CurrencyISO")] public string Currencyiso 
			{ 
				get { return _Currencyiso; }
				set { _Currencyiso = value; Track("CurrencyISO"); }
			}
			string _Currencyiso;
		
			public static IEnumerable<PureCurrency> Query(Database db, string[] columns = null, int[] Currencyid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Currency (NOLOCK)");

				if (Currencyid != null)
					sql.Where("CurrencyId IN (@0)", Currencyid);

                return db.Query<PureCurrency>(sql);
            }
		}
		
		[TableName("dbo.Pure_Post_Request")]
		[PrimaryKey("TranId")]
		[ExplicitColumns]
		public partial class PurePostRequest : FountainDb.Record<PurePostRequest>  
		{
			[Column("TranId")] public int Tranid 
			{ 
				get { return _Tranid; }
				set { _Tranid = value; Track("TranId"); }
			}
			int _Tranid;
			[Column("RequestId")] public string Requestid 
			{ 
				get { return _Requestid; }
				set { _Requestid = value; Track("RequestId"); }
			}
			string _Requestid;
			[Column("AccountName")] public string Accountname 
			{ 
				get { return _Accountname; }
				set { _Accountname = value; Track("AccountName"); }
			}
			string _Accountname;
			[Column("AccountNos")] public string Accountnos 
			{ 
				get { return _Accountnos; }
				set { _Accountnos = value; Track("AccountNos"); }
			}
			string _Accountnos;
			[Column("AccountTill")] public string Accounttill 
			{ 
				get { return _Accounttill; }
				set { _Accounttill = value; Track("AccountTill"); }
			}
			string _Accounttill;
			[Column("TranCurrency")] public string Trancurrency 
			{ 
				get { return _Trancurrency; }
				set { _Trancurrency = value; Track("TranCurrency"); }
			}
			string _Trancurrency;
			[Column("DRCRIndicator")] public string Drcrindicator 
			{ 
				get { return _Drcrindicator; }
				set { _Drcrindicator = value; Track("DRCRIndicator"); }
			}
			string _Drcrindicator;
	        [Column] public string Narration 
			{ 
				get { return _Narration; }
				set { _Narration = value; Track("Narration"); }
			}
			string _Narration;
			[Column("TranAmount")] public decimal? Tranamount 
			{ 
				get { return _Tranamount; }
				set { _Tranamount = value; Track("TranAmount"); }
			}
			decimal? _Tranamount;
			[Column("TranStatus")] public string Transtatus 
			{ 
				get { return _Transtatus; }
				set { _Transtatus = value; Track("TranStatus"); }
			}
			string _Transtatus;
			[Column("Tran_Initiator")] public string TranInitiator 
			{ 
				get { return _TranInitiator; }
				set { _TranInitiator = value; Track("Tran_Initiator"); }
			}
			string _TranInitiator;
			[Column("Tran_Approver")] public string TranApprover 
			{ 
				get { return _TranApprover; }
				set { _TranApprover = value; Track("Tran_Approver"); }
			}
			string _TranApprover;
			[Column("RequestDate")] public DateTime? Requestdate 
			{ 
				get { return _Requestdate; }
				set { _Requestdate = value; Track("RequestDate"); }
			}
			DateTime? _Requestdate;
			[Column("PostedDate")] public DateTime? Posteddate 
			{ 
				get { return _Posteddate; }
				set { _Posteddate = value; Track("PostedDate"); }
			}
			DateTime? _Posteddate;
		
			public static IEnumerable<PurePostRequest> Query(Database db, string[] columns = null, int[] Tranid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Post_Request (NOLOCK)");

				if (Tranid != null)
					sql.Where("TranId IN (@0)", Tranid);

                return db.Query<PurePostRequest>(sql);
            }
		}
		
		[TableName("dbo.Pure_TransactionLog")]
		[PrimaryKey("TransId")]
		[ExplicitColumns]
		public partial class PureTransactionLog : FountainDb.Record<PureTransactionLog>  
		{
			[Column("TransId")] public int Transid 
			{ 
				get { return _Transid; }
				set { _Transid = value; Track("TransId"); }
			}
			int _Transid;
			[Column("RequestId")] public string Requestid 
			{ 
				get { return _Requestid; }
				set { _Requestid = value; Track("RequestId"); }
			}
			string _Requestid;
			[Column("SourceAccount")] public string Sourceaccount 
			{ 
				get { return _Sourceaccount; }
				set { _Sourceaccount = value; Track("SourceAccount"); }
			}
			string _Sourceaccount;
			[Column("DestinationAccount")] public string Destinationaccount 
			{ 
				get { return _Destinationaccount; }
				set { _Destinationaccount = value; Track("DestinationAccount"); }
			}
			string _Destinationaccount;
	        [Column] public string Narration 
			{ 
				get { return _Narration; }
				set { _Narration = value; Track("Narration"); }
			}
			string _Narration;
	        [Column] public string Amount 
			{ 
				get { return _Amount; }
				set { _Amount = value; Track("Amount"); }
			}
			string _Amount;
			[Column("TranStatus")] public string Transtatus 
			{ 
				get { return _Transtatus; }
				set { _Transtatus = value; Track("TranStatus"); }
			}
			string _Transtatus;
			[Column("CustomerId")] public int? Customerid 
			{ 
				get { return _Customerid; }
				set { _Customerid = value; Track("CustomerId"); }
			}
			int? _Customerid;
			[Column("TranCurrency")] public string Trancurrency 
			{ 
				get { return _Trancurrency; }
				set { _Trancurrency = value; Track("TranCurrency"); }
			}
			string _Trancurrency;
			[Column("TranInitiator")] public string Traninitiator 
			{ 
				get { return _Traninitiator; }
				set { _Traninitiator = value; Track("TranInitiator"); }
			}
			string _Traninitiator;
			[Column("TranApprover")] public string Tranapprover 
			{ 
				get { return _Tranapprover; }
				set { _Tranapprover = value; Track("TranApprover"); }
			}
			string _Tranapprover;
			[Column("TranDate")] public DateTime? Trandate 
			{ 
				get { return _Trandate; }
				set { _Trandate = value; Track("TranDate"); }
			}
			DateTime? _Trandate;
			[Column("PostedDate")] public DateTime? Posteddate 
			{ 
				get { return _Posteddate; }
				set { _Posteddate = value; Track("PostedDate"); }
			}
			DateTime? _Posteddate;
		
			public static IEnumerable<PureTransactionLog> Query(Database db, string[] columns = null, int[] Transid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_TransactionLog (NOLOCK)");

				if (Transid != null)
					sql.Where("TransId IN (@0)", Transid);

                return db.Query<PureTransactionLog>(sql);
            }
		}
		
		[TableName("dbo.Pure_Menu")]
		[ExplicitColumns]
		public partial class PureMenu : FountainDb.Record<PureMenu>  
		{
			[Column("MenuId")] public int Menuid 
			{ 
				get { return _Menuid; }
				set { _Menuid = value; Track("MenuId"); }
			}
			int _Menuid;
			[Column("MenuName")] public string Menuname 
			{ 
				get { return _Menuname; }
				set { _Menuname = value; Track("MenuName"); }
			}
			string _Menuname;
			[Column("MenuURL")] public string Menuurl 
			{ 
				get { return _Menuurl; }
				set { _Menuurl = value; Track("MenuURL"); }
			}
			string _Menuurl;
			[Column("MenuDesc")] public string Menudesc 
			{ 
				get { return _Menudesc; }
				set { _Menudesc = value; Track("MenuDesc"); }
			}
			string _Menudesc;
			[Column("ParentId")] public int? Parentid 
			{ 
				get { return _Parentid; }
				set { _Parentid = value; Track("ParentId"); }
			}
			int? _Parentid;
	        [Column] public int? Sequence 
			{ 
				get { return _Sequence; }
				set { _Sequence = value; Track("Sequence"); }
			}
			int? _Sequence;
			[Column("ExternalURL")] public string Externalurl 
			{ 
				get { return _Externalurl; }
				set { _Externalurl = value; Track("ExternalURL"); }
			}
			string _Externalurl;
			[Column("MenuStatus")] public bool? Menustatus 
			{ 
				get { return _Menustatus; }
				set { _Menustatus = value; Track("MenuStatus"); }
			}
			bool? _Menustatus;
			[Column("LinkIcon")] public string Linkicon 
			{ 
				get { return _Linkicon; }
				set { _Linkicon = value; Track("LinkIcon"); }
			}
			string _Linkicon;
			[Column("RankId")] public int? Rankid 
			{ 
				get { return _Rankid; }
				set { _Rankid = value; Track("RankId"); }
			}
			int? _Rankid;
		}
		
		[TableName("dbo.Pure_Account_Category")]
		[PrimaryKey("AccountId")]
		[ExplicitColumns]
		public partial class PureAccountCategory : FountainDb.Record<PureAccountCategory>  
		{
			[Column("AccountId")] public int Accountid 
			{ 
				get { return _Accountid; }
				set { _Accountid = value; Track("AccountId"); }
			}
			int _Accountid;
			[Column("AccountName")] public string Accountname 
			{ 
				get { return _Accountname; }
				set { _Accountname = value; Track("AccountName"); }
			}
			string _Accountname;
			[Column("AccountDesc")] public string Accountdesc 
			{ 
				get { return _Accountdesc; }
				set { _Accountdesc = value; Track("AccountDesc"); }
			}
			string _Accountdesc;
			[Column("AccountStatus")] public int? Accountstatus 
			{ 
				get { return _Accountstatus; }
				set { _Accountstatus = value; Track("AccountStatus"); }
			}
			int? _Accountstatus;
		
			public static IEnumerable<PureAccountCategory> Query(Database db, string[] columns = null, int[] Accountid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Account_Category (NOLOCK)");

				if (Accountid != null)
					sql.Where("AccountId IN (@0)", Accountid);

                return db.Query<PureAccountCategory>(sql);
            }
		}
		
		[TableName("dbo.Pure_AuditTrail")]
		[PrimaryKey("Id")]
		[ExplicitColumns]
		public partial class PureAuditTrail : FountainDb.Record<PureAuditTrail>  
		{
	        [Column] public int Id 
			{ 
				get { return _Id; }
				set { _Id = value; Track("Id"); }
			}
			int _Id;
			[Column("UserName")] public string Username 
			{ 
				get { return _Username; }
				set { _Username = value; Track("UserName"); }
			}
			string _Username;
			[Column("UserActivity")] public string Useractivity 
			{ 
				get { return _Useractivity; }
				set { _Useractivity = value; Track("UserActivity"); }
			}
			string _Useractivity;
	        [Column] public string Comment 
			{ 
				get { return _Comment; }
				set { _Comment = value; Track("Comment"); }
			}
			string _Comment;
			[Column("DateLog")] public DateTime? Datelog 
			{ 
				get { return _Datelog; }
				set { _Datelog = value; Track("DateLog"); }
			}
			DateTime? _Datelog;
			[Column("SystemName")] public string Systemname 
			{ 
				get { return _Systemname; }
				set { _Systemname = value; Track("SystemName"); }
			}
			string _Systemname;
			[Column("SystemIP")] public string Systemip 
			{ 
				get { return _Systemip; }
				set { _Systemip = value; Track("SystemIP"); }
			}
			string _Systemip;
		
			public static IEnumerable<PureAuditTrail> Query(Database db, string[] columns = null, int[] Id = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_AuditTrail (NOLOCK)");

				if (Id != null)
					sql.Where("Id IN (@0)", Id);

                return db.Query<PureAuditTrail>(sql);
            }
		}
		
		[TableName("dbo.Pure_Account_Details")]
		[PrimaryKey("Id")]
		[ExplicitColumns]
		public partial class PureAccountDetail : FountainDb.Record<PureAccountDetail>  
		{
	        [Column] public int Id 
			{ 
				get { return _Id; }
				set { _Id = value; Track("Id"); }
			}
			int _Id;
			[Column("CustomerId")] public int? Customerid 
			{ 
				get { return _Customerid; }
				set { _Customerid = value; Track("CustomerId"); }
			}
			int? _Customerid;
			[Column("AccountTitle")] public string Accounttitle 
			{ 
				get { return _Accounttitle; }
				set { _Accounttitle = value; Track("AccountTitle"); }
			}
			string _Accounttitle;
			[Column("AccountNos")] public string Accountnos 
			{ 
				get { return _Accountnos; }
				set { _Accountnos = value; Track("AccountNos"); }
			}
			string _Accountnos;
			[Column("AccountBal")] public decimal? Accountbal 
			{ 
				get { return _Accountbal; }
				set { _Accountbal = value; Track("AccountBal"); }
			}
			decimal? _Accountbal;
			[Column("ModifiedBy")] public string Modifiedby 
			{ 
				get { return _Modifiedby; }
				set { _Modifiedby = value; Track("ModifiedBy"); }
			}
			string _Modifiedby;
			[Column("ModifiedOn")] public DateTime? Modifiedon 
			{ 
				get { return _Modifiedon; }
				set { _Modifiedon = value; Track("ModifiedOn"); }
			}
			DateTime? _Modifiedon;
		
			public static IEnumerable<PureAccountDetail> Query(Database db, string[] columns = null, int[] Id = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Account_Details (NOLOCK)");

				if (Id != null)
					sql.Where("Id IN (@0)", Id);

                return db.Query<PureAccountDetail>(sql);
            }
		}
		
		[TableName("dbo.Pure_Repayment")]
		[PrimaryKey("RepayId")]
		[ExplicitColumns]
		public partial class PureRepayment : FountainDb.Record<PureRepayment>  
		{
			[Column("RepayId")] public int Repayid 
			{ 
				get { return _Repayid; }
				set { _Repayid = value; Track("RepayId"); }
			}
			int _Repayid;
			[Column("CustomerId")] public string Customerid 
			{ 
				get { return _Customerid; }
				set { _Customerid = value; Track("CustomerId"); }
			}
			string _Customerid;
			[Column("AmountCredit")] public decimal? Amountcredit 
			{ 
				get { return _Amountcredit; }
				set { _Amountcredit = value; Track("AmountCredit"); }
			}
			decimal? _Amountcredit;
			[Column("TransRef")] public string Transref 
			{ 
				get { return _Transref; }
				set { _Transref = value; Track("TransRef"); }
			}
			string _Transref;
			[Column("ReceiptNos")] public string Receiptnos 
			{ 
				get { return _Receiptnos; }
				set { _Receiptnos = value; Track("ReceiptNos"); }
			}
			string _Receiptnos;
			[Column("CreditedOn")] public DateTime? Creditedon 
			{ 
				get { return _Creditedon; }
				set { _Creditedon = value; Track("CreditedOn"); }
			}
			DateTime? _Creditedon;
		
			public static IEnumerable<PureRepayment> Query(Database db, string[] columns = null, int[] Repayid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_Repayment (NOLOCK)");

				if (Repayid != null)
					sql.Where("RepayId IN (@0)", Repayid);

                return db.Query<PureRepayment>(sql);
            }
		}
		
		[TableName("dbo.Pure_User")]
		[PrimaryKey("UserId")]
		[ExplicitColumns]
		public partial class PureUser : FountainDb.Record<PureUser>  
		{
			[Column("UserId")] public int Userid 
			{ 
				get { return _Userid; }
				set { _Userid = value; Track("UserId"); }
			}
			int _Userid;
			[Column("FirstName")] public string Firstname 
			{ 
				get { return _Firstname; }
				set { _Firstname = value; Track("FirstName"); }
			}
			string _Firstname;
			[Column("MiddleName")] public string Middlename 
			{ 
				get { return _Middlename; }
				set { _Middlename = value; Track("MiddleName"); }
			}
			string _Middlename;
			[Column("LastName")] public string Lastname 
			{ 
				get { return _Lastname; }
				set { _Lastname = value; Track("LastName"); }
			}
			string _Lastname;
			[Column("UserName")] public string Username 
			{ 
				get { return _Username; }
				set { _Username = value; Track("UserName"); }
			}
			string _Username;
			[Column("UserEmail")] public string Useremail 
			{ 
				get { return _Useremail; }
				set { _Useremail = value; Track("UserEmail"); }
			}
			string _Useremail;
			[Column("UserPWD")] public string Userpwd 
			{ 
				get { return _Userpwd; }
				set { _Userpwd = value; Track("UserPWD"); }
			}
			string _Userpwd;
			[Column("PhoneNos")] public string Phonenos 
			{ 
				get { return _Phonenos; }
				set { _Phonenos = value; Track("PhoneNos"); }
			}
			string _Phonenos;
			[Column("RoleId")] public int? Roleid 
			{ 
				get { return _Roleid; }
				set { _Roleid = value; Track("RoleId"); }
			}
			int? _Roleid;
			[Column("UserImg")] public string Userimg 
			{ 
				get { return _Userimg; }
				set { _Userimg = value; Track("UserImg"); }
			}
			string _Userimg;
			[Column("UserStatus")] public bool? Userstatus 
			{ 
				get { return _Userstatus; }
				set { _Userstatus = value; Track("UserStatus"); }
			}
			bool? _Userstatus;
			[Column("CreatedBy")] public string Createdby 
			{ 
				get { return _Createdby; }
				set { _Createdby = value; Track("CreatedBy"); }
			}
			string _Createdby;
			[Column("CreatedOn")] public DateTime? Createdon 
			{ 
				get { return _Createdon; }
				set { _Createdon = value; Track("CreatedOn"); }
			}
			DateTime? _Createdon;
			[Column("ModifiedBy")] public string Modifiedby 
			{ 
				get { return _Modifiedby; }
				set { _Modifiedby = value; Track("ModifiedBy"); }
			}
			string _Modifiedby;
			[Column("ModifiedOn")] public DateTime? Modifiedon 
			{ 
				get { return _Modifiedon; }
				set { _Modifiedon = value; Track("ModifiedOn"); }
			}
			DateTime? _Modifiedon;
		
			public static IEnumerable<PureUser> Query(Database db, string[] columns = null, int[] Userid = null)
            {
                var sql = new Sql();

                if (columns != null)
                    sql.Select(columns);

                sql.From("dbo.Pure_User (NOLOCK)");

				if (Userid != null)
					sql.Where("UserId IN (@0)", Userid);

                return db.Query<PureUser>(sql);
            }
		}
}
